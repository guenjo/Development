
const TwoHandInternal = {
  /**
   * Merker wann der Zweihandbutton zuletzt gedrückt wurde
   *
   * @type {Date}
    */
  lastPressed: new Date(),
  
  /**
   * ID des Intervalls (HMIRuntime.Timers.SetTimeout) aus der Funktion "Released"
   *
   * @type {number}
    */
  timer: 0,
  
  
  
  
  /**
   * Verzögertes Loslassen des Zweihandtasters (Wenn tatsächliches Loslassen unter 2 Sek
   * 
   * @returns {void}
   */
  ReleaseDelay: function() {
    TwoHandInternal.timer = 0; //Hier kein this, da anderer Kontext
    Tags("TwoHandButtonPressed").Write(false);
  },
  
  /**
   * Drücken des Zweihandtasters
   * 
   * @returns {void}
   */
  Pressed: function() {
    if (this.timer != 0) {
      HMIRuntime.Timers.ClearTimeout(this.timer);
      this.timer = 0;
    }
  
    this.lastPressed = new Date();

    Tags.CreateTagSet([
      ["TwoHandButtonPressed", true], 
      ["FocusEditShow", 0]
      ]).Write();
  },
  
  /**
   * Loslassen des Zweihandtasters und Prüfen der "Gedrückt-Zeit"
   * 
   * @returns {void}
   */
  Released: function() {
    let waitTimeMs = 2000;
    let now = new Date();
    let diff = now.getTime() - this.lastPressed.getTime();
    
    if (diff > waitTimeMs) {
      Tags("TwoHandButtonPressed").Write(false);
    } else {
      this.timer = HMIRuntime.Timers.SetTimeout(this.ReleaseDelay, waitTimeMs - diff);
    }
  }
}
/*<auto-generated>
***End of Global definition area***
Changes to this comment may cause incorrect behavior during document based import.
</auto-generated>*/
export function Button_Pressed() {
  TwoHandInternal.Pressed();
}
export function Button_Released() {
  TwoHandInternal.Released();
}
