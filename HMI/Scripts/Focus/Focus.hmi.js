/**
 * Tagname für "HMIRuntime.UI.DataSet"
 * Inhalt: Array der Tag-Werte für den Editor-Fokus
 *
 * @type {string}
 */
const dsFocusTag = 'dsFocusTag';


const FocusInternal = {
  /**
   * Erzeugt die Listen für den Haupteditor (Focus) zur Sollwerteingabe
   * 
   * @returns {void}
   */
  BuildList: function() {  
    let tag = [];
    let count = -1;
    
    function checkScreenItem(screenItem, x, y) {
      if (screenItem.hasOwnProperty("ContainedType")) {
        let zone = screenItem.ContainedType.includes("::Main_Zone") || screenItem.ContainedType.includes("::Overview_Zone");
        let set = screenItem.ContainedType.includes("::Main_Set") || screenItem.ContainedType.includes("::Widget_Set");
        
        if (set || zone) {
          count++;
          screenItem.Properties.FocusId = count;  
  
          if (set) {
            tag[count] = screenItem.Properties.Set.Tag;
          } else if (zone) {    
            tag[count] = screenItem.Properties.TempZone.Tag + ".Set";
          }
        }
      }
    };
  
    if (typeof HMIRuntime.UI.RootWindow.CurrentScreen !== "undefined") {
      for (let screenItem of HMIRuntime.UI.RootWindow.CurrentScreen.Items) {
        if (screenItem.hasOwnProperty("Screen") && (typeof screenItem.CurrentScreen !== "undefined")) {
          for (let screenInnerItem of screenItem.CurrentScreen.Items) {
            checkScreenItem(screenInnerItem, screenItem.Left, screenItem.Top);      
          }
        }
      }
    }
  
    if (HMIRuntime.UI.DataSet.Exists(dsFocusTag)) { HMIRuntime.UI.DataSet.Remove(dsFocusTag); }
    HMIRuntime.UI.DataSet.Add(dsFocusTag, JSON.stringify(tag));
    HMIRuntime.Trace(JSON.stringify(tag));
  
    let ts = Tags.CreateTagSet(["FocusMax", "FocusCounter", "FocusEditShow"]);
    ts[0].Value = count;
    ts[1].Value = 0;
    ts[2].Value = false;
    ts.Write();
  }
}

export const FocusExport = {
  /**
   * Begrenzt die Editor-Fenster-Verschiebung im Horizontalen
   * 
   * @param {WinCC.Faceplate} item - Instanz des Editor-Faceplates
   * @param {int} maxWidth - Maximale Breite
   * @returns {void}
   */
   Editor_Left_Changed: function(item, maxWidth) {
    if (item.Left < 0) {
      item.Left = 0;
    } else if (item.Left > maxWidth - item.Width) {
      item.Left = maxWidth - item.Width;
    }
  },

  /**
   * Begrenzt die Editor-Fenster-Verschiebung im Vertikalen
   * 
   * @param {WinCC.Faceplate} item - Instanz des Editor-Faceplates
   * @param {int} maxHeight - Maximale Höhe
   * @returns {number} - Wert für Top
   */
  Editor_Top_Changed: function(item, maxHeight) {
    if (item.Top < 0) {
      item.Top = 0;
    } else if (item.Top > maxHeight - item.Height) {
      item.Top = maxHeight - item.Height;
    }
  },

  /**
   * Steuert die Sichtbarkeit für das Editor-Fenster
   * 
   * @param {WinCC.Faceplate} item - Instanz des Editor-Faceplates
   * @returns {boolean} - Wert für Visibility
   */
  Editor_Visibility: function(item) {
    let ts = Tags.CreateTagSet(["FocusCounter", "FocusEditShow"]);
    ts.Read();
  
    let focusCounter = ts[0].Value;
    let focusShow = ts[1].Value; 
  
    let focusTag = HMIRuntime.UI.DataSet(dsFocusTag);
  
    let tag = JSON.parse(focusTag);
    let editTag = tag[focusCounter];
  
    if (focusShow) {
      if (Tags(editTag + ".IsLocked").Read()) {
        Tags("FocusEditShow").Write(false);
        return false;
      } else {
        Tags("FocusEditTag").Write(editTag);
        item.Properties.Set.Tag = editTag;
    
        if (editTag.includes("TempZone")) {
          item.Properties.Type = 0;
        } else {
          item.Properties.Type = 1;
        }
        return true;
      }
    } else {
      return false;
    }
  }
}
/*<auto-generated>
***End of Global definition area***
Changes to this comment may cause incorrect behavior during document based import.
</auto-generated>*/
export function Event_Loaded() {
  FocusInternal.BuildList();
}
