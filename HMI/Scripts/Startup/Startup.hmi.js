
const StartupIntern = {
  /**
   * Bildet die Liste der Anfahrwerte anhand der 체bergebene Seite
   * 
   * @param {number} page - Seite f체r welche die Liste gebaut werden soll
   * @returns {void}
   */
  BuildList: function(page) {
    let listMax = 8;
    let maxSet = Tags("DB_Recipe_Parameters.Size.Set").Read(); //Noch pr체fen
  
    if (page === undefined) {
      page = Tags('Startup_List_Page_Act').Read();
    } else {
      Tags('Startup_List_Page_Act').Write(page);
    }
  
    let ts = Tags.CreateTagSet();
    for (let i = 0; i <= maxSet; i++) {
      ts.Add(`DB_Unified_HMILists_Set[${i}].RampingPossible`);
    }
    ts.Read();
  
    let possibleIDs = [];
  
    for (let i = 0; i <= maxSet; i++) {
      if (ts[i].Value) {
        possibleIDs.push(i);
      }
    }
  
    let first = (page - 1) * listMax;
    let maxPage = Math.ceil(possibleIDs.length / listMax);
  
    let ids = possibleIDs
      .slice(first, first + listMax);
  
    HMIRuntime.Trace(`Len: ${possibleIDs.length}, Max: ${maxPage}`);
  
    Tags("Startup_List_Page_Max").Write(maxPage);
  
    for (let i = 0; i < listMax; i++) {
      if (ids.length > i) {
        Screen.Items(`Row_${i}`).Properties.Set.Tag = `DB_Unified_HMILists_Set[${ids[i]}]`;
        Screen.Items(`Row_${i}`).Visible = true;
      } else {
        Screen.Items(`Row_${i}`).Visible = false;
      }
    }
  },

  /**
   * Wechselt auf die n채chste seite in der Liste der Anfahrwerte
   * 
   * @returns {void}
   */
  NextList: function() {
    let ts = Tags.CreateTagSet(["Startup_List_Page_Act", "Startup_List_Page_Max"]);
    ts.Read();
  
    let act = ts[0].Value;
    let max = ts[1].Value;
  
    if (act >= max) {
      act = 1;
    } else {
      act += 1;
    }
    
    this.BuildList(act);
  },

  /**
   * Wechselt auf die vorherige seite in der Liste der Anfahrwerte
   * 
   * @returns {void}
   */
  PreviousList: function() {
    let ts = Tags.CreateTagSet(["Startup_List_Page_Act", "Startup_List_Page_Max"]);
    ts.Read();
  
    let act = ts[0].Value;
    let max = ts[1].Value;
  
    if (act <= 1) {
      act = max;
    } else {
      act -= 1;
    }
  
    this.BuildList(act);
  }
}
/*<auto-generated>
***End of Global definition area***
Changes to this comment may cause incorrect behavior during document based import.
</auto-generated>*/
export function Button_ListDown() {
  StartupIntern.NextList();
}
export function Button_ListUp() {
  StartupIntern.PreviousList();
}
export function Event_Loaded(page) {
  StartupIntern.BuildList(page);
}
