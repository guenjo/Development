import { langFile, screenshotPath, nexxt365File } from "_PATH"

const CommonHMIInternal = {
  /**
   * HMI-Variablen initialisieren
   * 
   * @returns {void}
   */
  InitVariables: function () {
    Tags.CreateTagSet([
      ["Trend_Date", new Date()]
    ]).Write();
  },

  /**
   * Speichert die NEXXT365-URL
   * 
   * @returns {void}
   */
  StoreNEXXT365URL: function () {
    let nexxt365URL = HMIRuntime.Tags("NEXXT365URL").Read();
    HMIRuntime.FileSystem.WriteFile(nexxt365File, nexxt365URL, "utf8");
  },

  /**
   * LÃ¤dt die NEXXT365-URL
   * 
   * @returns {void}
   */
  LoadNEXXT365URL: function () {
    HMIRuntime.FileSystem.ReadFile(nexxt365File, "utf8")
      .then((text) => {
        if (text !== undefined) {
          HMIRuntime.Tags("NEXXT365URL").Write(text);
          HMIRuntime.Trace(`Set NEXXT365URL to: ${lang}`);
        }
      });
  }
}

const CommonHMILanguage = {
  /**
   * Aktuelle Sprache aus Datei laden
   * 
   * @returns {void}
   */
  LoadLanguage: function () {
    HMIRuntime.FileSystem.ReadFile(langFile, "utf8")
      .then((text) => {
        let lang = Number(text);

        if (lang !== undefined) {

          //Initiale Sprachumschaltung, damit Datumsformate korrekt angezeigt werden (V17)
          if (lang == 1031) {
            HMIRuntime.UI.SysFct.SetLanguage(2057);
          } else {
            HMIRuntime.UI.SysFct.SetLanguage(1031);
          }

          HMIRuntime.Trace(`Set Language to: ${lang}`);
          HMIRuntime.UI.SysFct.SetLanguage(lang);
        }
      });
  },

  /**
   * Aktuelle Sprache in Datei sichern
   * 
   * @returns {void}
   */
  StoreLanguage: function () {
    HMIRuntime.FileSystem.WriteFile(langFile, HMIRuntime.Language.toString(), "utf8");

  },

  /**
  * Liest die Datei und sucht nach einem Eintrag mit einer bestimmten ID.
  * @returns {void} 
  */
  GetLanguageFileSuffix: function () {

    // Aktuelle Sprache lesen
    let id = HMIRuntime.Language;

    let foundText = "";
    let file = "Languages.txt";
    let textsPath = "/media/simatic/X51/weber/texts/";

    HMIRuntime.FileSystem.ReadFile(textsPath + file, 'utf8')
      .then(
        function (data) {
          HMIRuntime.Trace('CommonHMI::GetLanguageFileSuffix:Datei gelesen');

          return data;
        })
      // 2. Dateiinhalt parsen und suchen
      .then(function (content) {
        let resultText = "Eintrag nicht gefunden";
        let lines = content.split(/\r?\n/);
        let searchId = id.toString();
        HMIRuntime.Trace(`CommonHMI::GetLanguageFileSuffix: ${file} - suche nach: ${id}`);
        for (let i = 0; i < lines.length; i++) {
          let line = lines[i].trim();
          // Treffer, wenn Zeile mit "ID;" beginnt
          if (line.indexOf(searchId + ";") === 0) {
            let parts = line.split(";");

            if (parts.length > 1) {
              id = parts[0].trim();
              resultText = parts[3].split("-")[0].trim();
            }
            break;
          }
        }
        return resultText;
      })
      // 3. Ergebnis in Tags schreiben
      .then(function (resultText) {
        HMIRuntime.Trace("CommonHMI::GetLanguageFileSuffix:ID gefunden: ID=" + id);
        Tags("LanguageSuffix").Write(resultText);
      })
      .catch(function (errorCode) {
        HMIRuntime.Trace('CommonHMI::GetLanguageFileSuffix::Read failed errorcode=' + errorCode);
        Tags("LanguageSuffix").Write("en");
      });
  },
}

export const CommonHMIExport = {
  /**
   * Speichert einen Screenshot
   * 
   * @returns {void}
   */
  DoScreenshot: function () {
    let d = new Date();
    let year = d.getFullYear();
    let month = d.getMonth() + 1;
    let day = d.getDate();
    let hour = d.getHours();
    let minute = d.getMinutes();
    let second = d.getSeconds();

    if (month < 10)
      month = '0' + month;

    if (day < 10)
      day = '0' + day;

    if (hour < 10)
      hour = '0' + hour;

    if (minute < 10)
      minute = '0' + minute;

    if (second < 10)
      second = '0' + second;

    let name = year + '-' + month + '-' + day + '_' + hour + minute + second + '_Screenshot.jpg';
    HMIRuntime.FileSystem.CreateDirectory(screenshotPath);
    HMIRuntime.Device.SysFct.CreateScreenshot(screenshotPath + name);
    HMIRuntime.Timers.SetTimeout(() => {
      UI.SysFct.ChangeScreen("POPUP_Screenshot", "~/PopUp");
    }, 1000);
  }
}

/*<auto-generated>
***End of Global definition area***
Changes to this comment may cause incorrect behavior during document based import.
</auto-generated>*/
export function Button_LanguageChanged() {
  CommonHMILanguage.StoreLanguage();
  CommonHMILanguage.GetLanguageFileSuffix();
}
export function Event_StartLoaded() {
  CommonHMILanguage.LoadLanguage();
  CommonHMIInternal.InitVariables();
  CommonHMIInternal.LoadNEXXT365URL();
}
export function Event_SettingsCommonUnloaded() {
  CommonHMIInternal.StoreNEXXT365URL();
}
