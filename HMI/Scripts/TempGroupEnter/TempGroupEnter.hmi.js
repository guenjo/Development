/**
 * Tagname für "HMIRuntime.UI.DataSet"
 * Inhalt: Variablenname den Gruppensollwert
 *
 * @type {string}
 */
const dsTag = 'GroupEnterSPTag';

/**
 * Tagname für "HMIRuntime.UI.DataSet"
 * Inhalt: Variablenname den Gruppennamen
 *
 * @type {string}
 */
const dsGroup = 'GroupEnterGroup';


const TempGroupEnterIntern = {
  /**
   * Übergibt den Gruppensollwert und gibt eine Meldung aus
   * 
   * @param {number} newValue - Neuer Sollert für die Gruppe
   * @returns {void}
   */
  ChangeGroupSP: function(newValue) {
    let tagname = UI.DataSet.Item(dsTag);
    let group = UI.DataSet.Item(dsGroup);
    let value = Number(newValue);
    let user = Tags("DB_User_CurrentUser_Name").Read();
  
    if (!isNaN(value)) {
      Tags(tagname).Write(value);
  
      HMIRuntime.Alarming.SysFct.CreateOperatorInputInformation(
        HMIRuntime.Resources.TextLists("@Default.MessageText").Item(17),
        user,
        group,
        HMIRuntime.Resources.TextLists("@Default.Groups"),
        value
      );
  
      HMIRuntime.UI.SysFct.ChangeScreen("POPUP_None", "~/PopUp");
    }
  },

  /**
   * Lädt den Sollwert für die aktuelle Gruppe
   * 
   * @returns {number} - Angeforderter Sollwert
   */
  GetSetpoint: function() {
    let tagname = UI.DataSet.Item(dsTag);
    let value = Tags(tagname).Read();
    return value;
  },

  /**
   * Übergibt die Gruppen-ID und den Sollwert-Tag-Namen in UI-Datasets und öffnet das POPUP
   * 
   * @param {WinCC.HMITag} spTag - HMI-Tag des Sollwerts
   * @param {WinCC.HMITag} groupTag - HMI-Tag der Gruppe
   * @returns {void}
   */
  Open: function(spTag, groupTag) {
    if (UI.DataSet.Exists(dsTag)) {
      UI.DataSet.Remove(dsTag);
    }
    UI.DataSet.Add(dsTag, spTag.Name);
  
    if (UI.DataSet.Exists(dsGroup)) {
      UI.DataSet.Remove(dsGroup);
    }
    UI.DataSet.Add(dsGroup, groupTag.Read());
  
    HMIRuntime.UI.SysFct.ChangeScreen("POPUP_TempGroup_Enter", "~/PopUp");
  },

  /**
   * Aufräumen, wenn das POPUP geschlossen wurde
   * 
   * @returns {void}
   */
  Unloaded: function() {
    HMIRuntime.Tags.SysFct.SetTagValue("PopUpActive", false);
    UI.DataSet.Remove(this.dsTag);
    UI.DataSet.Remove(this.dsGroup);
  },
};

export const TempGroupEnterExport = {
  /**
   * Button für die Grupppeneingabe wurde gedrückt
   * 
   * @param {WinCC.HMITag} spTag - HMI-Tag des Sollwerts
   * @param {WinCC.HMITag} groupTag - HMI-Tag der Gruppe
   * @returns {void}
   */
  Button_OpenPopUp: function(spTag, groupTag) {
    TempGroupEnterIntern.Open(spTag, groupTag);
  },

  /**
   * Button zum Bestätigen der Gruppeneingabe wurde gedrückt
   * 
   * @param {WinCC.EA-Feld} inputbox - Referenz auf das Eingabefeld für den Gruppensollwert
   * @returns {void}
   */
  Button_Save: function(inputbox) {
    TempGroupEnterIntern.ChangeGroupSP(inputbox.ProcessValue);
  },  

  /**
   * Event wenn das POPUP geöffnet wurde
   * 
   * @param {WinCC.EA-Feld} inputbox - Referenz auf das Eingabefeld für den Gruppensollwert
   * @returns {void}
   */
  Event_Loaded: function(inputbox) {
    inputbox.ProcessValue = TempGroupEnterIntern.GetSetpoint();
    HMIRuntime.Tags.SysFct.SetTagValue("PopUpActive", true);
  }
};
/*<auto-generated>
***End of Global definition area***
Changes to this comment may cause incorrect behavior during document based import.
</auto-generated>*/
export function Event_Unloaded() {
  TempGroupEnterIntern.Unloaded();
}
