
const UserInternal = {  
  /**
   * Merker ob das Intervall (HMIRuntime.Timers.SetInterval) aus dem Skript "StartLoaded" beendet ist
   *
   * @type {boolean}
    */
  done: true,

  /**
   * ID des Intervalls (HMIRuntime.Timers.SetInterval) aus dem Skript "StartLoaded"
   *
   * @type {number}
    */
  logCheck: -1,
     
  
  /**
   * Meldet den Benutzer ab, durch setzen der UserID auf 9998
   * Schließt das PopUp
   * 
   * @returns {void}
   */
  LogOut: function() {
    HMIRuntime.Tags.SysFct.SetTagValue("DB_User_CurrentUser_ID", 9998);
    HMIRuntime.UI.SysFct.ChangeScreen("POPUP_None", "../PopUp");
  },
  
  /**
   * Wechselt das Bild von "START" zu "TEMPLATE, wenn ein Benutzer angemeldet ist oder wurde
   * 
   * @returns {void}
   */
  StartLoaded: function() {
    function Change(){
      HMIRuntime.UI.SysFct.ChangeScreen("TEMPLATE", "~");
    };
    
    function Check() {
      if (Tags("DB_User_CurrentUser_Level").Read() > 1) {
        HMIRuntime.Timers.SetTimeout(Change, 1000);
        if (!this.done) {
          this.done = true;
          HMIRuntime.Timers.ClearInterval(this.logCheck);
        }
        return true;
      } else {
        return false;
      }
    };
  
    if (!Check()) {
      //Prüfung jede Sekunde ob Benutzer angemeldet wurde
      this.logCheck = HMIRuntime.Timers.SetInterval(Check, 1000);
      this.done = false;
    }  
  },
  
  /**
   * Beendet das Prüfen ob ein Benutzer angemeldet wurde (aus Skript "StartLoaded"), wenn das START-Bild verlassen wird
   * 
   * @returns {void}
   */
  StartUnloaded: function() {
    if (!this.done) {
      this.done = true;
      HMIRuntime.Timers.ClearInterval(this.logCheck);
    }
  }
}


export const UserExport = {
  /**
   * Füllt das Listenfeld im "POPUP_Userlogin" mit den Benutzern
   * Wählt dan akutell angemeldeten Benutzer aus
   * 
   * @param {WinCC.Listenfeld} userList - Referenz auf das Listenfeld
   * @returns {void}
   */
  InitPopup: function(userList) {
    var selected = Tags("DB_User_CurrentUser_ID").Read() - 1;
  
    for (let i = 0; i < userList.SelectionItems.Count; i++) {
      userList.SelectionItems[i].Text = Tags(`DB_User_Users[${i + 1}].Name`).Read();
      if (i == selected) {
          userList.ProcessValue = Math.pow(2, i); //Im Prozesswert sind alle ausgewählten Einträge binär codiert
      }
    }
  },
  
  /**
   * Versucht einen Benutzer nach der Passworteingabe anzumelden
   * 
   * @param {WinCC.Listenfeld} userList - Referenz auf das Listenfeld
   * @param {WinCC.Textbox} passwordBox- Referenz auf das Passwort-Eingabefeld
   * @returns {void}
   */
  TryLogin: function(userList, passwordBox) {
    let password = passwordBox.ProcessValue;
  
    if (password != "") {
      let user = -1;
    
      for (let i = 0; i < userList.SelectionItems.Count; i++) {
        if (userList.SelectionItems[i].IsSelected) {
            user = i + 1;
        }
      }
    
      if (user >= 0) {
        let ts = Tags.CreateTagSet([`DB_User_Users[${user}].Password`, `DB_User_Users[${user}].Level`]);
        ts.Read();
        
        let selUserPw = ts[0].Value;
        let selUserLevel = ts[1].Value;
    
        //Wenn das Passwort zum ausgwählten Benutzer passt, wird die Passwortbox grün, sonst rot
        if (password == selUserPw && selUserLevel > 0) {
          Tags("DB_User_CurrentUser_ID").Write(user);
          passwordBox.BackColor = HMIRuntime.Math.RGB(0, 255, 0);
          passwordBox.Enabled = false;
          userList.Enabled = false;
  
          HMIRuntime.Timers.SetTimeout(function() {
            HMIRuntime.UI.SysFct.ChangeScreen("POPUP_None", "../PopUp");
          }, 2000);
        } else {
          passwordBox.BackColor = HMIRuntime.Math.RGB(255, 0, 0);
        }
      } else {
        //Ist kein Benutzer ausgewählt, wird das Passwort zurückgesetzt
        passwordBox.ProcessValue = "";
      }
    }
  },
}
/*<auto-generated>
***End of Global definition area***
Changes to this comment may cause incorrect behavior during document based import.
</auto-generated>*/
export function Button_LogOut() {
  UserInternal.LogOut();
}
export function Event_StartLoaded() {
  UserInternal.StartLoaded();
}
export function Event_StartUnloaded() {
  UserInternal.StartUnloaded();
}
